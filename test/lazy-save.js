// –ú–æ–¥—É–ª—å –ª–µ–Ω–∏–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ localStorage
// –í—Å–µ–≥–¥–∞ –ø–∏—à–µ–º –≤ localStorage –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ

class LazySaveManager {
    constructor() {
        this.queue = new Map(); // –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.isProcessing = false; // –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        this.retryAttempts = new Map(); // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        this.maxRetries = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        this.retryDelay = 2000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
        this.processingInterval = 5000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ (–º—Å)
        this.lastProcessTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        this.startQueueProcessor();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.setupOnlineHandler();
        
        console.log('üîÑ LazySaveManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤ localStorage, –≤ —Ñ–æ–Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    async saveData(value, column, row, sheetName) {
        const dataKey = `${sheetName}_${column}_${row}`;
        const saveData = {
            value,
            column,
            row,
            sheetName,
            timestamp: Date.now(),
            id: dataKey
        };

        try {
            // 1. –ú–ì–ù–û–í–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            this.saveToLocalStorage(dataKey, saveData);
            console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage: ${dataKey} = ${value}`);
            
            // 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            this.addToQueue(dataKey, saveData);
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
            return false;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveToLocalStorage(key, data) {
        try {
            localStorage.setItem(`lazy_save_${key}`, JSON.stringify(data));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
            const queueMeta = this.getQueueMetadata();
            queueMeta.lastUpdate = Date.now();
            queueMeta.totalItems = this.getLocalStorageQueueSize();
            localStorage.setItem('lazy_save_metadata', JSON.stringify(queueMeta));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ localStorage:', error);
            throw error;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    addToQueue(key, data) {
        this.queue.set(key, data);
        this.retryAttempts.set(key, 0);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        if (!this.isProcessing) {
            this.processQueue();
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ localStorage
    getLocalStorageQueueSize() {
        let count = 0;
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('lazy_save_') && key !== 'lazy_save_metadata') {
                count++;
            }
        }
        return count;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏
    getQueueMetadata() {
        try {
            const meta = localStorage.getItem('lazy_save_metadata');
            return meta ? JSON.parse(meta) : { lastUpdate: 0, totalItems: 0 };
        } catch {
            return { lastUpdate: 0, totalItems: 0 };
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async processQueue() {
        if (this.isProcessing || this.queue.size === 0) {
            return;
        }

        this.isProcessing = true;
        console.log(`üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ (${this.queue.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);

        const promises = [];
        const failedItems = [];

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏
        for (const [key, data] of this.queue) {
            const attempt = this.retryAttempts.get(key) || 0;
            
            if (attempt >= this.maxRetries) {
                console.warn(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è ${key}`);
                failedItems.push(key);
                continue;
            }

            promises.push(
                this.sendToServer(data, key)
                    .then(() => {
                        // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ localStorage
                        this.removeFromQueue(key);
                        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${key}`);
                    })
                    .catch(error => {
                        console.warn(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${key} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                        this.retryAttempts.set(key, attempt + 1);
                        failedItems.push(key);
                    })
            );
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await Promise.allSettled(promises);

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        failedItems.forEach(key => {
            if (this.retryAttempts.get(key) >= this.maxRetries) {
                this.removeFromQueue(key);
                console.warn(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫): ${key}`);
            }
        });

        this.isProcessing = false;
        this.lastProcessTime = Date.now();
        
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${this.queue.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async sendToServer(data, key) {
        return new Promise((resolve, reject) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            googleSheetsApi.saveData(data.value, data.column, data.row, data.sheetName)
                .then(success => {
                    if (success) {
                        resolve();
                    } else {
                        reject(new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É'));
                    }
                })
                .catch(reject);
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ localStorage
    removeFromQueue(key) {
        this.queue.delete(key);
        this.retryAttempts.delete(key);
        
        try {
            localStorage.removeItem(`lazy_save_${key}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const queueMeta = this.getQueueMetadata();
            queueMeta.lastUpdate = Date.now();
            queueMeta.totalItems = this.getLocalStorageQueueSize();
            localStorage.setItem('lazy_save_metadata', JSON.stringify(queueMeta));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage:', error);
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    startQueueProcessor() {
        setInterval(() => {
            const now = Date.now();
            const timeSinceLastProcess = now - this.lastProcessTime;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if (timeSinceLastProcess >= this.processingInterval && this.queue.size > 0) {
                this.processQueue();
            }
        }, this.processingInterval);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    setupOnlineHandler() {
        window.addEventListener('online', () => {
            console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏');
            this.processQueue();
        });

        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
        window.addEventListener('focus', () => {
            if (this.queue.size > 0) {
                console.log('üëÅÔ∏è –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å, –ø—Ä–æ–≤–µ—Ä—è—é –æ—á–µ—Ä–µ–¥—å');
                this.processQueue();
            }
        });
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    restoreQueueFromLocalStorage() {
        try {
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ—á–µ—Ä–µ–¥—å –∏–∑ localStorage...');
            
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && key.startsWith('lazy_save_') && key !== 'lazy_save_metadata') {
                    try {
                        const data = JSON.parse(localStorage.getItem(key));
                        const queueKey = key.replace('lazy_save_', '');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
                        if (Date.now() - data.timestamp < maxAge) {
                            this.queue.set(queueKey, data);
                            this.retryAttempts.set(queueKey, 0);
                        } else {
                            // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                            localStorage.removeItem(key);
                        }
                    } catch (error) {
                        console.warn(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${key}:`, error);
                        localStorage.removeItem(key);
                    }
                }
            }
            
            console.log(`üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${this.queue.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
            if (this.queue.size > 0) {
                this.processQueue();
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    getQueueStats() {
        const queueMeta = this.getQueueMetadata();
        return {
            queueSize: this.queue.size,
            localStorageSize: queueMeta.totalItems,
            lastUpdate: new Date(queueMeta.lastUpdate).toLocaleString(),
            isProcessing: this.isProcessing,
            retryCounts: Object.fromEntries(this.retryAttempts)
        };
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    clearAllData() {
        try {
            // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            this.queue.clear();
            this.retryAttempts.clear();
            
            // –û—á–∏—â–∞–µ–º localStorage
            for (let i = localStorage.length - 1; i >= 0; i--) {
                const key = localStorage.key(i);
                if (key && key.startsWith('lazy_save_')) {
                    localStorage.removeItem(key);
                }
            }
            
            console.log('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–µ–Ω–∏–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    getAllPendingData() {
        const pendingData = [];
        for (const [key, data] of this.queue) {
            pendingData.push({
                id: key,
                ...data,
                attempts: this.retryAttempts.get(key) || 0
            });
        }
        return pendingData;
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const lazySaveManager = new LazySaveManager();

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    lazySaveManager.restoreQueueFromLocalStorage();
});

// –¢–∞–∫–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        lazySaveManager.restoreQueueFromLocalStorage();
    });
} else {
    lazySaveManager.restoreQueueFromLocalStorage();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.lazySaveManager = lazySaveManager;
