// Упрощенный LazyImage без зависимостей
window.LazyImage = (function() {
    'use strict';
    
    // Проверяем, что React доступен
    if (typeof React === 'undefined') {
        console.error('React is not available');
        return {};
    }

    const { useState, useEffect, useRef } = React;

    function LazyImageComponent({ 
        src, 
        alt, 
        className = '', 
        onClick, 
        onError,
        priority = 'normal'
    }) {
        const [currentSrc, setCurrentSrc] = useState('');
        const [isLoaded, setIsLoaded] = useState(false);
        const imgRef = useRef(null);

        useEffect(() => {
            if (!src || !window.imageLoader) {
                setCurrentSrc(src || '../card/no-image.png');
                setIsLoaded(true);
                return;
            }

            // Если изображение уже загружено
            if (window.imageLoader.loaded.has(src)) {
                setCurrentSrc(src);
                setIsLoaded(true);
                return;
            }

            const onImageLoad = (loadedSrc) => {
                if (loadedSrc === src) {
                    setCurrentSrc(src);
                    setIsLoaded(true);
                }
            };

            // Добавляем в очередь загрузки
            window.imageLoader.addImages([src], priority, onImageLoad);

            // Intersection Observer для видимых изображений
            if (priority === 'normal' && imgRef.current) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            window.imageLoader.addImages([src], 'critical', onImageLoad);
                            observer.unobserve(entry.target);
                        }
                    });
                }, { 
                    rootMargin: '50px',
                    threshold: 0.1 
                });

                observer.observe(imgRef.current);

                return () => {
                    observer.disconnect();
                };
            }
        }, [src, priority]);

        const handleError = (e) => {
            const target = e.target;
            if (target.src.includes('no-image.png')) return;
            
            target.src = '../card/no-image.png';
            target.onerror = null;
            
            if (onError) onError(e);
        };

        return React.createElement('img', {
            ref: imgRef,
            src: currentSrc || '../card/no-image.png',
            alt: alt,
            className: `${className} ${isLoaded ? 'loaded' : 'loading'}`,
            onClick: onClick,
            onError: handleError,
            style: {
                opacity: isLoaded ? 1 : 0.7,
                transition: 'opacity 0.3s ease-in-out'
            }
        });
    }

    return {
        LazyImage: LazyImageComponent
    };
})();