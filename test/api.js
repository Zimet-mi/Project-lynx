// API —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets

// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω—ã
if (typeof GOOGLE_SCRIPT_URLS === 'undefined') {
    var GOOGLE_SCRIPT_URLS = {
        getSheetId: 'https://script.google.com/macros/s/AKfycbxemxyuf8cFQCnr1joWtAzRqhIyfeTCU2OU19RrWac57c0HuANTdNRb7i21iVEr9yNQ/exec',
        saveData: 'https://script.google.com/macros/s/AKfycbxQ3MrknFLRGXb6J7YJcNEVe5IShT-AITtvSvZHHSwK1OPvs-4ikzDXeSWQ60czU5z1/exec'
    };
}

if (typeof CACHE_CONFIG === 'undefined') {
    var CACHE_CONFIG = {
        generalExpiry: 420000,
        participantsExpiry: 120000
    };
}

class GoogleSheetsApi {
    constructor() {
        this.sheetIdCache = null;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
    getCachedData(sheetName, range) {
        const cacheKey = `data_${sheetName}_${range}`;
        try {
            const cachedData = localStorage.getItem(cacheKey);
            if (cachedData) {
                return JSON.parse(cachedData);
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞:', error);
        }
        return null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Google Apps Script
    async getSheetId() {
        if (this.sheetIdCache) {
            return this.sheetIdCache;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage
            const fromSession = sessionStorage.getItem('SHEET_ID');
            if (fromSession) {
                this.sheetIdCache = fromSession;
                return this.sheetIdCache;
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ sessionStorage:', error);
        }

        try {
            const response = await axios.get(GOOGLE_SCRIPT_URLS.getSheetId);
            this.sheetIdCache = response.data;
            
            try {
                sessionStorage.setItem('SHEET_ID', this.sheetIdCache);
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ sessionStorage:', error);
            }
            
            return this.sheetIdCache;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Sheet ID:', error);
            throw error;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async fetchDataWithCache(sheetName, range, cacheExpiry = CACHE_CONFIG.generalExpiry) {
        
        if (!navigator.onLine) {
            const cachedData = this.getCachedData(sheetName, range);
            if (cachedData) {
                console.log('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return cachedData;
            }
        }
        
        const cacheKey = `data_${sheetName}_${range}`;
        const timeKey = `time_${sheetName}_${range}`;
        console.group(`[GoogleSheetsApi] ${sheetName}!${range}`);
        const startTime = performance.now();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            const cachedData = localStorage.getItem(cacheKey);
            const cachedTime = localStorage.getItem(timeKey);
            
            if (cachedData && cachedTime) {
                const currentTime = Date.now();
                const timeDiff = currentTime - parseInt(cachedTime);
                
                if (timeDiff < cacheExpiry) {
                    console.log('–í–æ–∑–≤—Ä–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞');
                    console.groupEnd();
                    return JSON.parse(cachedData);
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
            const sheetId = await this.getSheetId();
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${sheetName}!${range}?key=${API_KEY}`;
            
            console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–∑ —Å–µ—Ç–∏:', url);
            const response = await axios.get(url);
            
            const data = response.data;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            localStorage.setItem(cacheKey, JSON.stringify(data));
            localStorage.setItem(timeKey, Date.now().toString());
            
            console.log('–°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –∫–µ—à');
            console.log('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –º—Å:', Math.round(performance.now() - startTime));
            console.groupEnd();
            
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            console.groupEnd();
            throw error;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
    async saveData(value, column, row, sheetName) {
        try {
            const params = new URLSearchParams({
                column: column,
                row: row,
                value: value,
                sheet: sheetName
            });

            const response = await axios.get(`${GOOGLE_SCRIPT_URLS.saveData}?${params.toString()}`);
            
            if (response.status === 200) {
                console.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${sheetName} ${column}${row} = ${value}`);
                return true;
            } else {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', response.status);
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    async fetchSchedule() {
        const cacheKey = 'schedule_data';
        const timeKey = 'schedule_time';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cachedData = localStorage.getItem(cacheKey);
        const cachedTime = localStorage.getItem(timeKey);
        
        if (cachedData && cachedTime) {
            const currentTime = Date.now();
            const timeDiff = currentTime - parseInt(cachedTime);
            
            if (timeDiff < CACHE_CONFIG.generalExpiry) {
                return JSON.parse(cachedData);
            }
        }

        try {
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${TIMETABLE_ID}/values/${TIMETABLE_RANGE}?key=${API_KEY}`;
            const response = await axios.get(url);
            
            const data = response.data;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            localStorage.setItem(cacheKey, JSON.stringify(data));
            localStorage.setItem(timeKey, Date.now().toString());
            
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
            throw error;
        }
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    async preloadAllData() {
        const promises = [];
        const loadedSheets = new Set();
        
        ALL_PARTICIPANTS_SHEETS.forEach(({ sheet }) => {
            if (!loadedSheets.has(sheet)) {
                loadedSheets.add(sheet);
                const range = RangeHelper.getSheetRange(sheet);
                if (range) {
                    promises.push(
                        this.fetchDataWithCache(sheet, range, CACHE_CONFIG.generalExpiry)
                            .catch(err => console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ ${sheet}:`, err))
                    );
                }
            }
        });
        
        // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        promises.push(
            this.fetchSchedule()
                .catch(err => console.warn('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', err))
        );
        
        await Promise.all(promises);
        console.log('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const googleSheetsApi = new GoogleSheetsApi();

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.googleSheetsApi = googleSheetsApi;